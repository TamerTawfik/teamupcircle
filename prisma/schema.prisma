datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id                  String              @id @default(cuid())
    name                String?
    email               String?             @unique
    emailVerified       DateTime?
    passwordHash        String?
    image               String?
    username            String?             @unique
    location            String?
    role                Role                @default(MEMBER)
    accounts            Account[]
    collaborationStyles CollaborationStyle?
    // Connection related fields
    sentConnections     Connection[]        @relation("SentConnections")
    receivedConnections Connection[]        @relation("ReceivedConnections")
    notifications       Notification[]
    privacySettings     PrivacySettings?

    // Connection request rate limiting
    lastConnectionRequest  DateTime?
    connectionRequestCount Int       @default(0)

    // Message related fields
    senderMessages    Message[] @relation("sender")
    recipientMessages Message[] @relation("recipient")

    // Feedback related fields
    feedbacks Feedback[]

    status      Status    @default(ACTIVE)
    blockedAt   DateTime?
    blockReason String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Collaboration style preferences
model CollaborationStyle {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    techStack          String[] // Preferred technology stack
    availabilityStatus AvailabilityStatus @default(AVAILABLE)
    hoursPerWeek       Int?
    teamSize           TeamSize           @default(Less_Than_5)
    teamRoles          String[]
    projectDomains     String[] // Array of preferred project domains
    // Relations
    userId             String             @unique
    user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Connection {
    id         String           @id @default(cuid())
    senderId   String
    receiverId String
    status     ConnectionStatus @default(PENDING)
    createdAt  DateTime         @default(now())
    updatedAt  DateTime         @updatedAt

    sender   User @relation("SentConnections", fields: [senderId], references: [id], onDelete: Cascade)
    receiver User @relation("ReceivedConnections", fields: [receiverId], references: [id], onDelete: Cascade)

    @@unique([senderId, receiverId])
    @@index([senderId])
    @@index([receiverId])
}

model Notification {
    id        String           @id @default(cuid())
    userId    String
    type      NotificationType
    message   String
    read      Boolean          @default(false)
    createdAt DateTime         @default(now())
    metadata  Json? // For storing additional data like connection IDs

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model PrivacySettings {
    id                       String               @id @default(cuid())
    userId                   String               @unique
    connectionRequests       ConnectionPrivacy    @default(EVERYONE)
    connectionListVisibility ConnectionVisibility @default(CONNECTIONS)
    autoDeclineRequests      Boolean              @default(false)
    notificationPreferences  Json // Store notification preferences as JSON

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
    id               String    @id @default(cuid())
    text             String
    created          DateTime  @default(now())
    senderId         String?
    recipientId      String?
    sender           User?     @relation("sender", fields: [senderId], references: [id], onDelete: SetNull)
    recipient        User?     @relation("recipient", fields: [recipientId], references: [id], onDelete: SetNull)
    dateRead         DateTime?
    senderDeleted    Boolean   @default(false)
    recipientDeleted Boolean   @default(false)
}

model Feedback {
    id        String         @id @default(cuid())
    content   String
    userId    String?
    userEmail String?
    userAgent String?
    ipAddress String?
    pageUrl   String?
    status    FeedbackStatus @default(PENDING)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt

    user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

enum Role {
    ADMIN
    MEMBER
}

enum AvailabilityStatus {
    AVAILABLE
    NOT_AVAILABLE
}

enum TeamSize {
    Open_TO_ANY
    Less_Than_5
    Less_Than_10
    Less_Than_20
    More_Than_20
}

enum ConnectionStatus {
    PENDING
    ACCEPTED
    DECLINED
    REMOVED
}

enum ConnectionPrivacy {
    EVERYONE
    SECOND_DEGREE
    NOBODY
}

enum ConnectionVisibility {
    EVERYONE
    CONNECTIONS
    NOBODY
}

enum NotificationType {
    CONNECTION_REQUEST
    CONNECTION_ACCEPTED
    CONNECTION_DECLINED
    CONNECTION_REMOVED
}

enum FeedbackStatus {
    PENDING
    REVIEWED
    RESOLVED
    REJECTED
}

enum Status {
    ACTIVE
    BLOCKED
}
